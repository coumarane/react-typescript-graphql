{"ast":null,"code":"var _jsxFileName = \"/Users/coumar/Documents/Dev/Reactjs/react-typescript-graphql/client/src/components/contact/contact.list.tsx\";\nimport * as React from \"react\";\nimport { useQuery } from \"react-apollo\";\nimport { ContactListQuery } from \"../../graphql/queries/contact.queries\";\nimport ErrorMessage from \"../common/error.message\";\nimport Loading from \"../common/loading\";\n\nconst ContactList = props => {\n  const _useQuery = useQuery(ContactListQuery),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data; // const detailContactMutation = useQuery<IContact>(ContactDetailtQuery, { variables: { id: id }});\n  // console.log(`data=>contacts: ${JSON.stringify(data?.contacts)}`)\n\n\n  if (loading) return React.createElement(React.Fragment, null, React.createElement(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }));\n  if (error || !data) return React.createElement(React.Fragment, null, React.createElement(ErrorMessage, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }));\n  return React.createElement(React.Fragment, null, React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Contact list\"), React.createElement(\"div\", {\n    className: \"table-responsive\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    className: \"table table-striped table-sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"#\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Name\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Email\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Date of birth\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Actions\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, data && data.contacts && data.contacts.length > 0 && data.contacts.map((item, index) => {\n    return React.createElement(React.Fragment, {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, item.id), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, item.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, item.email), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, item.dateOfBirth), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-edit\",\n      onClick: props.handleEdit(item.id),\n      style: {\n        color: '##0d903c',\n        cursor: 'pointer'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"\\xA0\"), \" | \", React.createElement(\"i\", {\n      className: \"fa fa-trash\",\n      onClick: props.handleDelete(item.id),\n      style: {\n        color: 'red',\n        cursor: 'pointer'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"\\xA0\"))));\n  })))));\n}; // export const ContactListAsQuery: React.FC<IOwnProps> = (props) => {\n//   return (\n//     <>\n//       <h6>Contact list</h6>\n//       <Query<IData> query={ContactListQuery}>\n//       {\n//         ({loading, error, data}) => {\n//           if (loading) return <>\"Loading...\"</>\n//           if (error || !data) return <>`Error!`</>\n//           return (\n//             <>\n//             <div className=\"table-responsive\">\n//               <table className=\"table table-striped table-sm\">\n//                 <thead>\n//                   <tr>\n//                     <th>#</th>\n//                     <th>Name</th>\n//                     <th>Email</th>\n//                     <th>Date of birth</th>\n//                     <th>Actions</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {data && data.contacts &&\n//                     data.contacts.length > 0 &&\n//                     data.contacts.map((item, index) => {\n//                       return (\n//                         <React.Fragment key={index}>\n//                           <tr>\n//                             <td>{item.id}</td>\n//                             <td>{item.name}</td>\n//                             <td>{item.email}</td>\n//                             <td>{item.dateOfBirth}</td>\n//                             <th>\n//                               <i className=\"fa fa-edit\" onClick={props.handleEdit(item.id)} style={{color: '##0d903c', cursor: 'pointer'}}>&nbsp;</i> | <i className=\"fa fa-trash\" onClick={props.handleDelete(item.id)} style={{color: 'red', cursor: 'pointer'}}>&nbsp;</i>\n//                               </th>\n//                           </tr>\n//                         </React.Fragment>\n//                       );\n//                     })}\n//                 </tbody>\n//               </table>\n//             </div>\n//             </>\n//           )\n//         }\n//       }\n//       </Query>\n//     </>\n//   );\n// };\n\n\nexport default ContactList;","map":{"version":3,"sources":["/Users/coumar/Documents/Dev/Reactjs/react-typescript-graphql/client/src/components/contact/contact.list.tsx"],"names":["React","useQuery","ContactListQuery","ErrorMessage","Loading","ContactList","props","loading","error","data","contacts","length","map","item","index","id","name","email","dateOfBirth","handleEdit","color","cursor","handleDelete"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { useQuery } from \"react-apollo\";\r\nimport { IContact } from \"../../models/contact\";\r\nimport { ContactListQuery } from \"../../graphql/queries/contact.queries\";\r\nimport ErrorMessage from \"../common/error.message\";\r\nimport Loading from \"../common/loading\";\r\n\r\n\r\ninterface IOwnProps {\r\n handleDelete: (id: number) => (e: React.MouseEvent) => void;\r\n handleEdit: (id: number) => (e: React.MouseEvent) =>  void;\r\n}\r\n\r\ninterface IData {\r\n  contacts: IContact[];\r\n}\r\n\r\nconst ContactList: React.FC<IOwnProps> = (props) => {\r\n  const { loading, error, data } = useQuery<IData>(ContactListQuery)\r\n  // const detailContactMutation = useQuery<IContact>(ContactDetailtQuery, { variables: { id: id }});\r\n  // console.log(`data=>contacts: ${JSON.stringify(data?.contacts)}`)\r\n  \r\n  if (loading) return <><Loading /></>\r\n  if (error || !data) return <><ErrorMessage error={error} /></>\r\n\r\n  return (\r\n    <>\r\n      <h6>Contact list</h6>\r\n\r\n      <div className=\"table-responsive\">\r\n        <table className=\"table table-striped table-sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Name</th>\r\n              <th>Email</th>\r\n              <th>Date of birth</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data && data.contacts &&\r\n              data.contacts.length > 0 &&\r\n              data.contacts.map((item: any, index: any) => {\r\n                return (\r\n                  <React.Fragment key={index}>\r\n                    <tr>\r\n                      <td>{item.id}</td>\r\n                      <td>{item.name}</td>\r\n                      <td>{item.email}</td>\r\n                      <td>{item.dateOfBirth}</td>\r\n                      <th>\r\n                        <i className=\"fa fa-edit\" onClick={props.handleEdit(item.id)} style={{color: '##0d903c', cursor: 'pointer'}}>&nbsp;</i> | <i className=\"fa fa-trash\" onClick={props.handleDelete(item.id)} style={{color: 'red', cursor: 'pointer'}}>&nbsp;</i>\r\n                      </th>\r\n                    </tr>\r\n                  </React.Fragment>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\n// export const ContactListAsQuery: React.FC<IOwnProps> = (props) => {\r\n//   return (\r\n//     <>\r\n//       <h6>Contact list</h6>\r\n\r\n//       <Query<IData> query={ContactListQuery}>\r\n//       {\r\n//         ({loading, error, data}) => {\r\n//           if (loading) return <>\"Loading...\"</>\r\n//           if (error || !data) return <>`Error!`</>\r\n\r\n//           return (\r\n//             <>\r\n//             <div className=\"table-responsive\">\r\n//               <table className=\"table table-striped table-sm\">\r\n//                 <thead>\r\n//                   <tr>\r\n//                     <th>#</th>\r\n//                     <th>Name</th>\r\n//                     <th>Email</th>\r\n//                     <th>Date of birth</th>\r\n//                     <th>Actions</th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                   {data && data.contacts &&\r\n//                     data.contacts.length > 0 &&\r\n//                     data.contacts.map((item, index) => {\r\n//                       return (\r\n//                         <React.Fragment key={index}>\r\n//                           <tr>\r\n//                             <td>{item.id}</td>\r\n//                             <td>{item.name}</td>\r\n//                             <td>{item.email}</td>\r\n//                             <td>{item.dateOfBirth}</td>\r\n//                             <th>\r\n//                               <i className=\"fa fa-edit\" onClick={props.handleEdit(item.id)} style={{color: '##0d903c', cursor: 'pointer'}}>&nbsp;</i> | <i className=\"fa fa-trash\" onClick={props.handleDelete(item.id)} style={{color: 'red', cursor: 'pointer'}}>&nbsp;</i>\r\n//                               </th>\r\n//                           </tr>\r\n//                         </React.Fragment>\r\n//                       );\r\n//                     })}\r\n//                 </tbody>\r\n//               </table>\r\n//             </div>\r\n//             </>\r\n//           )\r\n//         }\r\n//       }\r\n//       </Query>\r\n\r\n//     </>\r\n//   );\r\n// };\r\n\r\nexport default ContactList;\r\n"]},"metadata":{},"sourceType":"module"}