{"ast":null,"code":"import _objectSpread from \"/Users/coumar/Documents/Dev/Reactjs/react-typescript-graphql/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/coumar/Documents/Dev/Reactjs/react-typescript-graphql/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/coumar/Documents/Dev/Reactjs/react-typescript-graphql/client/src/components/contact/contact.creation.tsx\";\nimport * as React from \"react\";\nimport { useMutation, useApolloClient } from \"react-apollo\";\nimport { AddContactMutation, UpdateContactMutation } from \"../../graphql/mutations/contact.mutations\";\nimport { ContactDetailQuery, ContactListQuery } from \"../../graphql/queries/contact.queries\";\n\nconst ContactCreation = props => {\n  const initialContcatState = {\n    id: 0,\n    name: \"\",\n    email: \"\",\n    dateOfBirth: \"\"\n  };\n  const client = useApolloClient();\n\n  const _useMutation = useMutation(AddContactMutation),\n        _useMutation2 = _slicedToArray(_useMutation, 1),\n        addContact = _useMutation2[0]; // contact is a state variable\n\n\n  const _React$useState = React.useState(initialContcatState),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        contact = _React$useState2[0],\n        setContact = _React$useState2[1];\n\n  React.useEffect(() => {\n    if (props.editContactId && props.editContactId > 0) {\n      client.query({\n        query: ContactDetailQuery,\n        variables: {\n          id: props.editContactId\n        }\n      }).then(result => {\n        const contact = result.data.contact;\n        setContact(contact);\n      });\n    }\n  }, [props.editContactId]);\n\n  const handleReset = () => {\n    setContact(initialContcatState);\n  };\n\n  const handleSubmit = e => // React.SyntheticEvent<HTMLInputElement | HTMLButtonElement>\n  {\n    e.preventDefault(); // console.log(`ContactCreation::handleSubmit=>contact ${JSON.stringify(contact)}`);\n\n    if (contact.id > 0) {\n      client.mutate({\n        mutation: UpdateContactMutation,\n        variables: {\n          id: contact.id,\n          name: contact.name,\n          email: contact.email,\n          dateOfBirth: contact.dateOfBirth\n        },\n        refetchQueries: [{\n          query: ContactListQuery\n        }]\n      }).then(result => {\n        const contact = result.data.contact;\n        console.log(`Updated successfully...`);\n      });\n    } else {\n      addContact({\n        variables: {\n          name: contact.name,\n          email: contact.email,\n          dateOfBirth: contact.dateOfBirth\n        },\n        refetchQueries: [{\n          query: ContactListQuery\n        }] // to update ContactListQuery on ContactList.tsx\n\n      });\n    }\n\n    handleReset();\n  };\n  /**\r\n   * Common input change event\r\n   * When the field is entered an event is raised and update the state\r\n   */\n\n\n  const handleInputChange = e => {\n    e.preventDefault();\n    const target = e.target;\n    setContact(contact => _objectSpread({}, contact, {\n      [target.name]: target.value\n    }));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card bg-light mb-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"New contact\"), React.createElement(\"div\", {\n    className: \"card-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group col-md-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Name\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    value: contact.name,\n    placeholder: \"Enter name\",\n    className: \"form-control\",\n    required: true,\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group col-md-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Email address\"), React.createElement(\"input\", {\n    type: \"email\",\n    name: \"email\",\n    value: contact.email,\n    placeholder: \"Enter email\",\n    className: \"form-control\",\n    \"aria-describedby\": \"emailHelp\",\n    required: true,\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(\"small\", {\n    id: \"emailHelp\",\n    className: \"form-text text-muted\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"We'll never share your email with anyone else.\")), React.createElement(\"div\", {\n    className: \"form-group col-md-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Date of birth\"), React.createElement(\"input\", {\n    type: \"date\",\n    max: \"2020-12-01\",\n    min: \"1900-12-01\",\n    name: \"dateOfBirth\",\n    value: contact.dateOfBirth,\n    placeholder: \"Enter date of birth\",\n    className: \"form-control\",\n    required: true,\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }))), contact.id > 0 && React.createElement(\"input\", {\n    className: \"btn btn-outline-danger\",\n    type: \"submit\",\n    value: \"Update\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }), ` `, contact.id <= 0 && React.createElement(\"input\", {\n    className: \"btn btn-outline-primary\",\n    type: \"submit\",\n    value: \"Save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), ` `, React.createElement(\"input\", {\n    className: \"btn btn-outline-warning\",\n    type: \"button\",\n    value: \"Reset\",\n    onClick: handleReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), ` `)))));\n};\n\nexport default ContactCreation;","map":{"version":3,"sources":["/Users/coumar/Documents/Dev/Reactjs/react-typescript-graphql/client/src/components/contact/contact.creation.tsx"],"names":["React","useMutation","useApolloClient","AddContactMutation","UpdateContactMutation","ContactDetailQuery","ContactListQuery","ContactCreation","props","initialContcatState","id","name","email","dateOfBirth","client","addContact","useState","contact","setContact","useEffect","editContactId","query","variables","then","result","data","handleReset","handleSubmit","e","preventDefault","mutate","mutation","refetchQueries","console","log","handleInputChange","target","value"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { useMutation, useApolloClient } from \"react-apollo\";\r\nimport { IContact } from \"../../models/contact\";\r\nimport { AddContactMutation, UpdateContactMutation } from \"../../graphql/mutations/contact.mutations\";\r\nimport { ContactDetailQuery, ContactListQuery } from \"../../graphql/queries/contact.queries\";\r\n\r\ninterface IOwnProps {\r\n  editContactId?: number;\r\n}\r\n\r\nconst ContactCreation: React.FunctionComponent<IOwnProps> = (\r\n  props: IOwnProps\r\n) => {\r\n  const initialContcatState: IContact = {\r\n    id: 0,\r\n    name: \"\",\r\n    email: \"\",\r\n    dateOfBirth: \"\"\r\n  };\r\n\r\n  const client = useApolloClient();\r\n  \r\n  const [addContact] = useMutation(AddContactMutation);\r\n\r\n  // contact is a state variable\r\n  const [contact, setContact] = React.useState(initialContcatState);\r\n\r\n  React.useEffect(() => {\r\n    if (props.editContactId && props.editContactId! > 0) {\r\n      client.query({query: ContactDetailQuery, variables: {id: props.editContactId}}).then(result => {\r\n        const contact = result.data.contact as IContact\r\n        setContact(contact)\r\n      });\r\n    }\r\n  }, [props.editContactId])\r\n\r\n  const handleReset = () => {\r\n    setContact(initialContcatState);\r\n  }\r\n\r\n  const handleSubmit = (\r\n    e: any // React.SyntheticEvent<HTMLInputElement | HTMLButtonElement>\r\n  ) => {\r\n    e.preventDefault();\r\n    // console.log(`ContactCreation::handleSubmit=>contact ${JSON.stringify(contact)}`);\r\n    if (contact.id > 0) {\r\n      client.mutate({mutation: UpdateContactMutation, variables: {\r\n        id: contact.id,\r\n        name: contact.name,\r\n        email: contact.email,\r\n        dateOfBirth: contact.dateOfBirth\r\n      }, refetchQueries: [{query: ContactListQuery}]}).then(result => {\r\n        const contact = result.data.contact as IContact\r\n        console.log(`Updated successfully...`)\r\n      });\r\n    } else {\r\n      addContact({\r\n        variables: {name: contact.name, email: contact.email, dateOfBirth: contact.dateOfBirth},\r\n        refetchQueries: [{query: ContactListQuery}] // to update ContactListQuery on ContactList.tsx\r\n      })\r\n    }\r\n    \r\n    handleReset();\r\n  };\r\n\r\n  /**\r\n   * Common input change event\r\n   * When the field is entered an event is raised and update the state\r\n   */\r\n  const handleInputChange = (\r\n    e: React.SyntheticEvent<HTMLInputElement | HTMLButtonElement>\r\n  ): void => {\r\n    e.preventDefault();\r\n\r\n    const target = e.target as any;\r\n    setContact(contact => ({ ...contact, [target.name]: target.value }));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"card bg-light mb-3\">\r\n          <div className=\"card-header\">New contact</div>\r\n          <div className=\"card-body\">\r\n            <div className=\"card-text\">\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group col-md-4\">\r\n                  <label>Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={contact.name}\r\n                    placeholder=\"Enter name\"\r\n                    className=\"form-control\"\r\n                    required\r\n                    onChange={handleInputChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group col-md-4\">\r\n                  <label>Email address</label>\r\n                  <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    value={contact.email}\r\n                    placeholder=\"Enter email\"\r\n                    className=\"form-control\"\r\n                    aria-describedby=\"emailHelp\"\r\n                    required\r\n                    onChange={handleInputChange}\r\n                  />\r\n                  <small id=\"emailHelp\" className=\"form-text text-muted\">\r\n                    We'll never share your email with anyone else.\r\n                  </small>\r\n                </div>\r\n\r\n                <div className=\"form-group col-md-4\">\r\n                  <label>Date of birth</label>\r\n                  <input\r\n                    type=\"date\"\r\n                    max=\"2020-12-01\"\r\n                    min=\"1900-12-01\"\r\n                    name=\"dateOfBirth\"\r\n                    value={contact.dateOfBirth}\r\n                    placeholder=\"Enter date of birth\"\r\n                    className=\"form-control\"\r\n                    required\r\n                    onChange={handleInputChange}\r\n                  />\r\n                </div>\r\n\r\n              </div>\r\n\r\n              {contact.id > 0 && <input className=\"btn btn-outline-danger\" type=\"submit\" value=\"Update\" />}{` `}\r\n              {contact.id <= 0 && <input className=\"btn btn-outline-primary\" type=\"submit\" value=\"Save\" />}{` `}\r\n              <input className=\"btn btn-outline-warning\" type=\"button\" value=\"Reset\" onClick={handleReset} />{` `}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactCreation;\r\n"]},"metadata":{},"sourceType":"module"}